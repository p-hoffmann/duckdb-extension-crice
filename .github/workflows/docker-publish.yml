name: Build & Publish Docker Image

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  IMAGE_NAME: ghcr.io/p-hoffmann/duckdb-extension-circe

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run smoke test (container)
        if: success() && github.event_name != 'pull_request'
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}:$(echo $GITHUB_SHA | cut -c1-7)

  provenance:
    needs: build-and-push
    if: success() && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      actions: read
      id-token: write
      packages: write
      contents: read
    steps:
      - name: Generate provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.IMAGE_NAME }}
          subject-digest: ${{ needs.build-and-push.outputs.digest || '' }}
          push-to-registry: true
